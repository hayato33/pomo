generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              String          @id @default(uuid())
  supabaseUserId  String          @unique
  nickname        String
  profileImageKey String?
  pomodoroLogs    PomodoroLog[]
  userSetting     UserSetting?
  categories      Category[]
}

model PomodoroLog {
  id                String          @id @default(uuid())
  userId            String
  completedCount    Int
  completedTime     Int
  displayInTimeline Boolean
  loggedAt          DateTime        @default(now())

  user       User           @relation(fields: [userId], references: [id])
  categories PomoCategory[]
}

model Category {
  id             String          @id @default(uuid())
  userId         String
  name           String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  user           User            @relation(fields: [userId], references: [id])
  pomoCategories PomoCategory[]
}

model PomoCategory {
  id             String          @id @default(uuid())
  pomodoroLogId  String
  categoryId     String

  pomodoroLog    PomodoroLog  @relation(fields: [pomodoroLogId], references: [id], onDelete: Cascade)
  category       Category     @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}


enum TimerBgm {
  noBgm
  focusBoost
  lofiWorkMode
  steadyPulse
  cinematicFocus
  acousticBreeze
  cafeProductivity
  natureCocoon
  electroFlow
  calmFlow
  pianoSerenity
}

enum TimerEndSound {
  noSound
  trumpetFanfare
  levelUp
  pop
  shakiin
  chanChan
  jajaan
  menOh
  womenOh
  cuckooClock
  ramenYatai
}

enum Font {
  mPlus1
  notoSansJP
  mochiyPopOne
  yuseiMagic
  zenKurenaido
}

model UserSetting {
  id                   String         @id @default(uuid())
  userId               String         @unique
  autoStartShortBreak  Boolean
  autoStartFocusTime   Boolean
  autoStartLongBreak   Boolean
  focusTimeBgm         TimerBgm       @default(noBgm)
  shortBreakBgm        TimerBgm       @default(noBgm)
  longBreakBgm         TimerBgm       @default(noBgm)
  focusTimeSound       TimerEndSound  @default(noSound)
  shortBreakSound      TimerEndSound  @default(noSound)
  longBreakSound       TimerEndSound  @default(noSound)
  soundVolume          Int
  timelinePageLink     Boolean
  postButtonToTimeline Boolean
  rankingPageLink      Boolean
  showOnRanking        Boolean
  backgroundImageKey   String?
  font                 Font           @default(mPlus1)
  hideExplainText      Boolean
  setRandomTime        Boolean
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt

  user                 User           @relation(fields: [userId], references: [id])
}